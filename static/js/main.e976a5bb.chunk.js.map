{"version":3,"sources":["common/Header.js","common/SubscribeBlock.js","common/SubscribeBlockMobile.js","App.js","sw.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rights","mode","opened","toggleContext","bind","assertThisInitialized","setState","react_default","a","createElement","vkui","aside","dropdown_default","onClick","onClose","before","notification_default","asideContent","done_default","fill","style","width","data-mode","poll_default","React","Component","sprintf","require","SubscribeBlock","animeId","anime","anime_id","animeName","anime_name","animeNameRus","anime_name_rus","shikiId","shiki_id","subStatus","sub_status","dubStatus","dub_status","shikiResp","undefined","showed","subSwitching","dubSwitching","titleImageUrl","titleDesc","titleGenres","click","clickButton","e","fetch","resp","json","el","genres","push","russian","image","preview","description_html","replace","join","console","log","type","stopPropagation","switch","error_code","connect","send","group_id","data","result","status","switching","size","_16_done_default","_this2","className","_24_dropdown_default","chevron_default","stretched","level","getButtonStyle","getBeforeSymbol","display","height","justifyContent","src","App","params","queryString","parse","window","location","search","FormData","par","append","vk_viewer_group_role","userId","vk_user_id","clientType","vk_platform","subscribeTitles","urlData","loading","method","body","then","titleId","titleType","_this3","activeView","id","activePanel","common_Header","map","item","common_SubscribeBlock","switchSubscribeStatus","Boolean","hostname","match","subscribe","detail","schemeAttribute","document","createAttribute","value","scheme","attributes","setNamedItem","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.e976a5bb.chunk.js","sourcesContent":["import {Cell, HeaderContext, List, PanelHeader, PanelHeaderContent} from \"@vkontakte/vkui\";\r\nimport Icon16Dropdown from '@vkontakte/icons/dist/16/dropdown';\r\nimport Icon24Notification from '@vkontakte/icons/dist/24/notification';\r\nimport Icon24Done from '@vkontakte/icons/dist/24/done';\r\nimport Icon24Poll from '@vkontakte/icons/dist/24/poll';\r\nimport React from \"react\";\r\n\r\n\r\n\r\n\r\nclass Header extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            rights:props.rights,\r\n            mode:props.mode,\r\n            opened:false,\r\n        }\r\n        this.toggleContext = this.toggleContext.bind(this);\r\n    }\r\n\r\n    toggleContext(){\r\n        this.setState({opened:!this.state.opened});\r\n    }\r\n    render() {\r\n        if(this.state.rights===\"editor\" || this.state.rights===\"admin\"){\r\n            return (\r\n                <PanelHeader>\r\n                    <PanelHeaderContent aside={<Icon16Dropdown/>} onClick={this.toggleContext}>\r\n                        Уведомления\r\n                    </PanelHeaderContent>\r\n                    <HeaderContext opened={this.state.opened} onClose={this.toggleContext}>\r\n                        <List>\r\n                            <Cell\r\n                                before={<Icon24Notification />}\r\n                                asideContent={this.state.mode === 'subscribe' ? <Icon24Done fill=\"var(--accent)\" /> : <div style={ {width:'24px'}} />}\r\n                                //onClick={select}\r\n                                data-mode=\"subscribe\"\r\n                            >\r\n                                Уведомления\r\n                            </Cell>\r\n                            <Cell\r\n                                before={<Icon24Poll />}\r\n                                asideContent={this.state.mode === 'statistic_full' ? <Icon24Done fill=\"var(--accent)\" /> : <div style={ {width:'24px'}} /> }\r\n                                //onClick={select}\r\n                                data-mode=\"statistic_full\"\r\n                            >\r\n                                Статистика\r\n                            </Cell>\r\n                            <Cell\r\n                                before={<Icon24Poll />}\r\n                                asideContent={this.state.mode === 'statistic_cur' ? <Icon24Done fill=\"var(--accent)\" /> : <div style={ {width:'24px'}} />}\r\n                                //onClick={select}\r\n                                data-mode=\"statistic_cur\"\r\n                            >\r\n                                Статистика текущий сезон\r\n                            </Cell>\r\n\r\n                        </List>\r\n                    </HeaderContext>\r\n                </PanelHeader>\r\n            );\r\n        } else {\r\n            return (<PanelHeader>Уведомления</PanelHeader>);\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Header;","import React from 'react';\r\nimport {\r\n    Button,\r\n    Spinner\r\n\r\n} from '@vkontakte/vkui';\r\n\r\nimport Icon16Done from '@vkontakte/icons/dist/16/done';\r\nimport Icon24Dropdown from '@vkontakte/icons/dist/24/dropdown';\r\nimport Icon24Chevron from '@vkontakte/icons/dist/24/chevron';\r\nimport '../css/main.css';\r\nimport connect from '@vkontakte/vkui-connect'\r\n\r\nvar sprintf = require('sprintf-js').sprintf;\r\n\r\nconst shikimoriGetAnimeUrl = \"https://sh.sovetromantica.com/api/animes/%s\"\r\nconst shikimoriImageBaseUrl = \"https://shikimori.one%s\"\r\n\r\nclass SubscribeBlock extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            animeId: props.anime.anime_id,\r\n            animeName: props.anime.anime_name,\r\n            animeNameRus: props.anime.anime_name_rus,\r\n            shikiId: props.anime.shiki_id,\r\n            subStatus: props.anime.sub_status,\r\n            dubStatus: props.anime.dub_status,\r\n            shikiResp: undefined,\r\n            opened: false,\r\n            showed: props.anime.showed,\r\n            subSwitching: false,\r\n            dubSwitching: false,\r\n            titleImageUrl: '',\r\n            titleDesc: '',\r\n            titleGenres: '',\r\n        };\r\n        this.click = this.click.bind(this);\r\n        this.clickButton = this.clickButton.bind(this);\r\n    }\r\n\r\n    async click(e) {\r\n        this.setState({opened: !this.state.opened})\r\n        if (!this.state.opened && this.state.shikiResp === undefined && this.state.shikiId !== 0) {\r\n            let resp = await fetch(sprintf(shikimoriGetAnimeUrl, this.state.shikiId));\r\n            let json = await resp.json();\r\n            var genres=[];\r\n            for (let el in json.genres){\r\n                genres.push(json.genres[el].russian)\r\n            }\r\n            this.setState({\r\n                shikiResp: json,\r\n                titleImageUrl: sprintf(shikimoriImageBaseUrl, json.image.preview),\r\n                titleDesc:json.description_html.replace(/<[^>]*>/gm,''),\r\n                titleGenres: genres.join(', ')\r\n            });\r\n            console.log(1);\r\n            //Image.prefetch(json.image.original);\r\n            console.log(2);\r\n\r\n            console.log(json);\r\n        }\r\n    }\r\n\r\n    async clickButton(e, type) {\r\n        e.stopPropagation();\r\n        if ((type === 0 && (this.state.subStatus !== -2 && this.state.subStatus !== -1)) || (type === 1 && (this.state.dubStatus !== -2 && this.state.dubStatus !== -1))) {\r\n            switch (type) {\r\n                case 0:\r\n                    this.setState({subSwitching: true});\r\n                    break;\r\n                case 1:\r\n                    this.setState({dubSwitching: true});\r\n                    break;\r\n            }\r\n            let resp = await this.props.switch(this.state.animeId, type)\r\n            if (resp.error_code === 0) {\r\n                switch (type) {\r\n                    case 0:\r\n                        if (this.state.subStatus === 1 || this.state.subStatus === 0) {\r\n                            this.setState({subStatus: 1 - this.state.subStatus, subSwitching: false})\r\n                        }\r\n                        break;\r\n                    case 1:\r\n                        if (this.state.dubStatus === 1 || this.state.dubStatus === 0) {\r\n                            this.setState({dubStatus: 1 - this.state.dubStatus, dubSwitching: false})\r\n                        }\r\n                        break;\r\n\r\n                }\r\n            }\r\n            else if (resp.error_code===7){\r\n                let resp = connect.send(\"VKWebAppAllowMessagesFromGroup\", {\"group_id\": 33905270});\r\n                if(resp.data.result){\r\n                    this.clickButton(e, type);\r\n                }\r\n            }\r\n            else {\r\n                console.log(resp);\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    getButtonStyle(status, switching) {\r\n        if (switching) {\r\n            return \"secondary\";\r\n        }\r\n        switch (status) {\r\n            case -1:\r\n                return \"secondary\";\r\n            case 0:\r\n                return \"primary\";\r\n            case 1:\r\n                return \"outline\";\r\n\r\n        }\r\n    }\r\n\r\n    getBeforeSymbol(status, switching) {\r\n        if (switching) {\r\n            return <Spinner size={\"small\"}/>;\r\n        }\r\n        switch (status) {\r\n            case 1:\r\n                return <Icon16Done/>;\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.showed) {\r\n            return (\r\n                <div>\r\n                    <div className=\"subscribeRow\" onClick={this.click}>\r\n                        <div className=\"subscribeIconExtender\">\r\n                            {this.state.opened ? <Icon24Dropdown fill=\"var(--accent)\"/> :\r\n                                <Icon24Chevron fill=\"var(--accent)\"/>}\r\n                        </div>\r\n                        <div className=\"subscribeRowFullContent\">\r\n                            <div className=\"subscribeRowContent\">\r\n                                <div\r\n                                    className=\"subscribeRowTitleNameContainer\">{this.state.animeName} / {this.state.animeNameRus}</div>\r\n                                <div className=\"subscribeRowButtonContainer\">\r\n                                    <Button stretched\r\n                                            level={this.getButtonStyle(this.state.subStatus, this.state.subSwitching)}\r\n                                            before={this.getBeforeSymbol(this.state.subStatus, this.state.subSwitching)}\r\n                                            onClick={(e) => this.clickButton(e, 0)}\r\n                                            className=\"subscribeRowButton\">Субтитры</Button>\r\n                                    <Button stretched\r\n                                            level={this.getButtonStyle(this.state.dubStatus, this.state.dubSwitching)}\r\n                                            before={this.getBeforeSymbol(this.state.dubStatus, this.state.dubSwitching)}\r\n                                            onClick={(e) => this.clickButton(e, 1)}\r\n                                            className=\"subscribeRowButton\">Озвучка</Button>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"fullTitleInformation\" style={{\"display\": (this.state.opened) ? \"flex\" : \"none\"}}>\r\n\r\n                        <div style={{\"width\": \"25px\", \"height\": \"100%\", \"display\": \"flex\"}}>\r\n                        </div>\r\n                        <div style={{\"width\":\"100%\",\"display\":\"flex\", \"justifyContent\":\"space-around\"}}>\r\n                            {this.state.shikiResp===undefined && <Spinner size=\"large\" className=\"fullTitleInformationSpinner\"/>}\r\n                            <div className=\"fullTitleInformationContainer\" style={{\"display\":(this.state.shikiResp===undefined)?\"none\":null}}>\r\n\r\n                                <div className=\"fullTitleInformationImage\" >\r\n                                    <img src={this.state.titleImageUrl} className=\"fullTitleInformationImageImg\"/>\r\n                                </div>\r\n                                <div className=\"fullTitleInformationContent\">\r\n                                    {this.state.titleDesc!=='' && <div><b>Описание: </b>{this.state.titleDesc}</div>}\r\n                                    {this.state.titleDesc!=='' && <hr/>}\r\n                                    {this.state.titleGenres!=='' && <div><b>Жанры: </b>{this.state.titleGenres}</div>}\r\n                                    {this.state.titleGenres!=='' && <hr/>}\r\n                                    </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default SubscribeBlock;","import React from 'react';\r\nimport {\r\n    Button,\r\n    Spinner\r\n\r\n} from '@vkontakte/vkui';\r\n\r\nimport Icon16Done from '@vkontakte/icons/dist/16/done';\r\nimport Icon24Dropdown from '@vkontakte/icons/dist/24/dropdown';\r\nimport Icon24Chevron from '@vkontakte/icons/dist/24/chevron';\r\nimport '../css/main.css';\r\n\r\nvar sprintf = require('sprintf-js').sprintf;\r\n\r\nconst shikimoriGetAnimeUrl = \"https://sh.sovetromantica.com/api/animes/%s\"\r\n\r\nclass SubscribeBlockMobile extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            animeId: props.anime.anime_id,\r\n            animeName: props.anime.anime_name,\r\n            animeNameRus: props.anime.anime_name_rus,\r\n            shikiId: props.anime.shiki_id,\r\n            subStatus: props.anime.sub_status,\r\n            dubStatus: props.anime.dub_status,\r\n            shikiResp: undefined,\r\n            opened: false,\r\n            showed: props.anime.showed,\r\n            subSwitching: false,\r\n            dubSwitching: false\r\n        };\r\n        this.click = this.click.bind(this);\r\n        this.clickButton = this.clickButton.bind(this);\r\n    }\r\n\r\n    async click(e) {\r\n        this.setState({opened: !this.state.opened})\r\n        if (!this.state.opened && this.state.shikiResp === undefined && this.state.shikiId !== 0) {\r\n            let resp = await fetch(sprintf(shikimoriGetAnimeUrl, this.state.shikiId));\r\n            let json = await resp.json();\r\n            this.setState({shikiResp: json});\r\n            console.log(1);\r\n            //Image.prefetch(json.image.original);\r\n            console.log(2);\r\n            console.log(json);\r\n        }\r\n    }\r\n\r\n    async clickButton(e, type) {\r\n        e.stopPropagation();\r\n        if ((type === 0 && (this.state.subStatus !== -2 && this.state.subStatus !== -1)) || (type === 1 && (this.state.dubStatus !== -2 && this.state.dubStatus !== -1))) {\r\n            switch (type) {\r\n                case 0:\r\n                    this.setState({subSwitching: true});\r\n                    break;\r\n                case 1:\r\n                    this.setState({dubSwitching: true});\r\n                    break;\r\n            }\r\n            let resp = await this.props.switch(this.state.animeId, type)\r\n            if (resp.error_code === 0) {\r\n                switch (type) {\r\n                    case 0:\r\n                        if (this.state.subStatus === 1 || this.state.subStatus === 0) {\r\n                            this.setState({subStatus: 1 - this.state.subStatus, subSwitching: false})\r\n                        }\r\n                        break;\r\n                    case 1:\r\n                        if (this.state.dubStatus === 1 || this.state.dubStatus === 0) {\r\n                            this.setState({dubStatus: 1 - this.state.dubStatus, dubSwitching: false})\r\n                        }\r\n                        break;\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    getButtonStyle(status, switching) {\r\n        if (switching) {\r\n            return \"secondary\";\r\n        }\r\n        switch (status) {\r\n            case -1:\r\n                return \"secondary\";\r\n            case 0:\r\n                return \"primary\";\r\n            case 1:\r\n                return \"outline\";\r\n\r\n        }\r\n    }\r\n\r\n    getBeforeSymbol(status, switching) {\r\n        if (switching) {\r\n            return <Spinner size={\"small\"}/>;\r\n        }\r\n        switch (status) {\r\n            case 1:\r\n                return <Icon16Done/>;\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.showed) {\r\n            return (\r\n                <div>\r\n                    <div className=\"subscribeRow\" onClick={this.click}>\r\n                        <div className=\"subscribeIconExtender\">\r\n                            {this.state.opened ? <Icon24Dropdown fill=\"var(--accent)\"/> :\r\n                                <Icon24Chevron fill=\"var(--accent)\"/>}\r\n                        </div>\r\n                        <div className=\"subscribeRowFullContent\">\r\n                            <div className=\"subscribeRowContent\">\r\n                                <div\r\n                                    className=\"subscribeRowTitleNameContainer\">{this.state.animeName} / {this.state.animeNameRus}</div>\r\n                                <div className=\"subscribeRowButtonContainer\">\r\n                                    <Button stretched\r\n                                            level={this.getButtonStyle(this.state.subStatus, this.state.subSwitching)}\r\n                                            before={this.getBeforeSymbol(this.state.subStatus, this.state.subSwitching)}\r\n                                            onClick={(e) => this.clickButton(e, 0)}\r\n                                            className=\"subscribeRowButton\">Субтитры</Button>\r\n                                    <Button stretched\r\n                                            level={this.getButtonStyle(this.state.dubStatus, this.state.dubSwitching)}\r\n                                            before={this.getBeforeSymbol(this.state.dubStatus, this.state.dubSwitching)}\r\n                                            onClick={(e) => this.clickButton(e, 1)}\r\n                                            className=\"subscribeRowButton\">Озвучка</Button>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"fullTitleInformation\" style={{\"display\":(this.state.opened)?\"flex\":\"none\", \"height\":\"250px\"}}>\r\n                        <div className=\"fullTitleInformationContainer\">\r\n                            <div className=\"fullTitleInformationImage\">\r\n                                <Spinner size=\"large\" />\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default SubscribeBlockMobile;","import React from 'react';\n//import connect from '@vkontakte/vkui-connect';\nimport {\n    View,\n    Root,\n    FixedLayout, Search, Group, Div, Panel\n\n} from '@vkontakte/vkui';\nimport {platform, IOS, ANDROID} from '@vkontakte/vkui';\n\nimport '@vkontakte/vkui/dist/vkui.css';\nimport queryString from 'query-string';\nimport Header from './common/Header'\nimport connect from '@vkontakte/vkui-connect'\nimport SubscribeBlock from \"./common/SubscribeBlock\";\nimport SubscribeBlockMobile from \"./common/SubscribeBlockMobile\";\n//import PanelSpinner from '@vkontakte/vkui/src/components/PanelSpinner/PanelSpinner'\n\nvar sprintf = require('sprintf-js').sprintf;\n\n\nconst reqSubscribeList = 'https://api.sovetromantica.com/api/v1/notify/vkapp/%s/get';\nconst switchSubscribe = 'https://api.sovetromantica.com/api/v1/notify/vkapp/%s/switch/%s/%s';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        let params = queryString.parse(window.location.search);\n        let data = new FormData();\n        for (let par in params) {\n            data.append(par, params[par]);\n        }\n        this.state = {\n            mode: 'subscribe',\n            rights: params.vk_viewer_group_role,\n            userId: params.vk_user_id,\n            clientType: params.vk_platform,\n            subscribeTitles: [],\n            urlData:data,\n            loading:true,\n        };\n\n\n    }\n\n\n    selectScreen() {\n\n    }\n\n    componentDidMount() {\n        fetch(sprintf(reqSubscribeList, this.state.userId), {method: 'POST', body: this.state.urlData})\n            .then(resp => resp.json())\n            .then((result) => {\n                for(let el in result){\n                    result[el].showed=true;\n                }\n                this.setState({subscribeTitles: result, loading:false});\n            });\n\n    }\n\n    async switchSubscribeStatus(titleId, titleType){\n        if(titleId!==0 && titleId!==undefined && titleType!==undefined){\n            let resp= await fetch(sprintf(switchSubscribe, this.state.userId, titleId, titleType), {method: 'POST', body: this.state.urlData});\n            let json=await resp.json();\n            return json;\n        } else {\n            console.log(\"switch parameters are wrong\")\n        }\n    }\n\n\n    render() {\n        return (\n            <Root activeView=\"sub-title\">\n                <View id=\"sub-title\" activePanel={this.state.mode}>\n                    <Panel id=\"subscribe\">\n\n                        <Header rights={this.state.rights} mode={this.state.mode}/>\n\n                        <Search/>\n                        {this.state.subscribeTitles.map(item => (\n                            (this.state.clientType!=='desktop_web')?<SubscribeBlock anime={item} switch={this.switchSubscribeStatus.bind(this)}/>:<SubscribeBlock anime={item} switch={this.switchSubscribeStatus.bind(this)}/>\n\n                        ))}\n                    </Panel>\n                </View>\n            </Root>\n\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nfunction registerValidSW(swUrl) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the old content will have been purged and\n\t\t\t\t\t\t\t// the fresh content will have been added to the cache.\n\t\t\t\t\t\t\t// It's the perfect time to display a \"New content is\n\t\t\t\t\t\t\t// available; please refresh.\" message in your web app.\n\t\t\t\t\t\t\tconsole.log('New content is available; please refresh.');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\tresponse.headers.get('content-type').indexOf('javascript') === -1\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.1/8 is considered localhost for IPv4.\n\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nexport default function register() {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Lets check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://goo.gl/SC7cgQ'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not local host. Just register service worker\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import 'core-js/es6/map';\nimport 'core-js/es6/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vkui-connect';\nimport App from './App';\nimport registerServiceWorker from './sw';\nimport unregister from './sw'\n\nconnect.subscribe((e) => {\n    switch (e.detail.type) {\n        case 'VKWebAppUpdateConfig':\n            let schemeAttribute = document.createAttribute('scheme');\n            schemeAttribute.value = e.detail.data.scheme ? e.detail.data.scheme : 'client_light';\n            document.body.attributes.setNamedItem(schemeAttribute);\n            break;\n\n        default:\n            console.log(e.detail.type);\n    }\n});\n\n// Init VK App\nconnect.send('VKWebAppInit', {});\n\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\n// расскомментируйте строку с registerServiceWorker();\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT \n//registerServiceWorker();\n\n\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n"],"sourceRoot":""}